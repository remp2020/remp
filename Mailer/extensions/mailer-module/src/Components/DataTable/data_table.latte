<div class="table-responsive">
    {if !isset($tableSettings['displayNavigation']) || $tableSettings['displayNavigation'] === true}
    <div class="action-header m-0 palette-White bg clearfix">
        {if !isset($tableSettings['allowSearch']) || $tableSettings['allowSearch'] === true}
        <div id="dt-search-{$tableId|noescape}" class="ah-search" style="display: none;">
            <input placeholder="Search" class="ahs-input b-0" type="text" id="dt-search-{$tableId}">
            <i class="ah-search-close zmdi zmdi-long-arrow-left" data-ma-action="ah-search-close"></i>
        </div>
        {/if}

        <div class="ah-right">
            <ul id="dt-nav-{$tableId|noescape}" class="ah-actions actions a-alt">
                {if !isset($tableSettings['allowSearch']) || $tableSettings['allowSearch'] === true}
                <li n:if="!isset($tableSettings['remove-search'])"><button class="btn palette-Cyan bg ah-search-trigger" data-ma-action="ah-search-open"><i class="zmdi zmdi-search"></i></button></li>
                {/if}
                <li class="ah-length dropdown">
                    <button class="btn palette-Cyan bg" data-toggle="dropdown">10</button>
                    <ul class="dropdown-menu dropdown-menu-right">
                        <li data-value="10"><a class="dropdown-item dropdown-item-button">10</a></li>
                        <li data-value="25"><a class="dropdown-item dropdown-item-button">25</a></li>
                        <li data-value="100"><a class="dropdown-item dropdown-item-button">100</a></li>
                        <li data-value="250"><a class="dropdown-item dropdown-item-button">250</a></li>
                    </ul>
                </li>
                <li class="ah-pagination ah-prev"><button class="btn palette-Cyan bg"><i class="zmdi zmdi-chevron-left"></i></button></li>
                <li class="ah-pagination ah-curr"><button class="btn palette-Cyan bg disabled">1</button></li>
                <li class="ah-pagination ah-next"><button class="btn palette-Cyan bg"><i class="zmdi zmdi-chevron-right"></i></button></li>
            </ul>

            <div id="dt-buttons-{$tableId|noescape}" class="ah-buttons"></div>
        </div>
    </div>
    {/if}

    <table id="{$tableId}" class="table table-striped table-bordered {isset($rowLink) ? 'table-hover'}" aria-busy="false">
        <thead>
        <tr>
            <th n:foreach="$colSettings as $colName => $colSetting">
                {isset($colSetting['header']) ? $colSetting['header'] : $colName}
                <i n:ifset="$colSetting['tooltip']" class="zmdi zmdi-info" data-toggle="tooltip" data-placement="top" title="{$colSetting['tooltip']}"></i>
            </th>
            <th n:if="!empty($rowActions)">actions</th>
        </tr>
        </thead>

        <tbody>
        <tr>
            <td n:foreach="$colSettings as $colName => $colSetting"></td>
        </tr>
        </tbody>

        <tfoot>
        </tfoot>
    </table>
</div>

<script>
    var filterData = filterData || {};
    filterData[{$tableId}] = {
        {foreach $colSettings as $colName => $colSetting}
        {continueIf !isset($colSetting['filter'])}
        {$colName}: {json_encode($colSetting['filter'])|noescape},
    {/foreach}
    };

    $(function() {
        $.fn.dataTable.ext.errMode = 'none';
        var dataTable = $('#{$tableId|noescape}').on('error.dt', function(e, settings, techNote, message) {
            if (typeof settings.jqXHR.responseJSON.error !== 'undefined') {
                $.notify({
                    message: settings.jqXHR.responseJSON.error
                }, {
                    allow_dismiss: false,
                    type: 'danger'
                });
            }

            console.warn('DataTables:', message);
        }).DataTable({
            'responsive': true,
            'columns': [
                {foreach $colSettings as $colName => $colSetting}
                {
                    'name': {$colName},
                    {ifset $colSetting['class']}
                    'className': {$colSetting['class']},
                    {/ifset}
                    {ifset $colSetting['orderable']}
                    'orderable': {$colSetting['orderable']},
                    {/ifset}
                    {ifset $colSetting['visible']}
                    'visible': {$colSetting['visible']},
                    {/ifset}
                    {ifset $colSetting['width']}
                    'width': {$colSetting['width']},
                    {/ifset}
                    'render': function () {
                        {ifset $colSetting['render']}
                        if (typeof $.fn.dataTables.render.{$colSetting['render']|noescape} === 'function') {
                            return $.fn.dataTables.render.{$colSetting['render']|noescape}();
                        }
                        if (typeof $.fn.dataTable.render.{$colSetting['render']|noescape} === 'function') {
                            return $.fn.dataTable.render.{$colSetting['render']|noescape}();
                        }
                        {/ifset}
                        return $.fn.dataTable.render.text();
                    }(),
                },
                {/foreach}
                {if !empty($rowActions)}
                {
                    data: 'actions',
                    name: 'actions',
                    orderable: false,
                    render: $.fn.dataTables.render.actions({json_encode($rowActions)|noescape}, {
                        {ifset $rowLinkAction}
                        "rowLinkAction": {$rowLinkAction},
                        {/ifset}
                        "tableId": {$tableId},
                    })
                }
                {/if}
            ],
            'columnDefs': [
                {foreach $colSettings as $colName => $colSetting}
                {
                    responsivePriority: {$colSetting['priority']},
                    targets: {$colSetting['colIndex']},
                },
                {/foreach}
                {if !empty($rowActions)}
                {
                    responsivePriority: 1,
                    targets: -1,
                },
                {/if}
            ],
            'searchCols': [
                {foreach $colSettings as $colSetting}
                    {ifset $colSetting['search']}
                        {'search': {$colSetting['search']}},
                    {else}
                        null,
                    {/ifset}
                {/foreach}
            ],
            {ifset $tableSettings['rowGroup']}
            'rowGroup':  {
                'dataSrc': {$tableSettings['rowGroup']}
            },
            {/ifset}
            'autoWidth': false,
            'sDom': 'tr',
            'processing': true,
            'serverSide': true,
            'ajax': {
                'url': {$sourceUrl},
                {ifset $tableSettings['add-params']}
                'data': {$tableSettings['add-params']|noescape}
                {/ifset}
            },
            {ifset $tableSettings['order']}
            'order': {$tableSettings['order']|noescape},
            {/ifset}
            {ifset $tableSettings['length']}
            'pageLength': {$tableSettings['length']|noescape},
            {/ifset}
            {ifset $tableSettings['scrollX']}
            'scrollX': {$tableSettings['scrollX']},
            {/ifset}
            'drawCallback': function(settings) {
                $.fn.dataTables.pagination(settings, 'dt-nav-{$tableId|noescape}');
            },
            'initComplete': function (a,b,c,d) {
                var state = this.api().state().columns;

                this.api().columns().every( function () {
                    var column = this;
                    var columns = column.settings().init().columns;
                    var columnDef = columns[column.index()];

                    if (filterData[{$tableId}][columnDef.name]) {
                        $.fn.dataTables.selectFilters(column, filterData[{$tableId}][columnDef.name], state);
                    }
                } );
            }
        });

        {if isset($tableSettings['exportColumns']) && !empty($tableSettings['exportColumns'])}
        new $.fn.dataTable.Buttons(dataTable, {
            buttons: [ {
                extend: 'csvHtml5',
                text: 'Download CSV',
                className: 'btn palette-Cyan bg',
                exportOptions: {
                    format: {
                        header: function (data) {
                            var html = $.parseHTML(data);

                            return html[0].data.replace(/(\r\n|\n|\r)/gm,"");
                        },
                        body: function (data, row, column, node) {
                            var $dateItem = $(node).find('.datatable-exportable-item');

                            if ($dateItem.length) {
                                return $dateItem.attr('title');
                            }

                            $(node).find('.percentage').remove();
                            return $(node).text().replace(/(\r\n|\n|\r)/gm,"");
                        }
                    },
                    columns: {json_encode($tableSettings['exportColumns'])|noescape}
                }
            } ]
        });

        dataTable.buttons().container()
                .appendTo( $('#dt-buttons-{$tableId|noescape}') );
        {/if}

        $.fn.dataTables.search(dataTable, 'dt-search-{$tableId|noescape}');
        $.fn.dataTables.navigation(dataTable, 'dt-nav-{$tableId|noescape}');

        {ifset $rowLinkAction}
        $('#{$tableId|noescape} tbody').on('click', 'tr', function () {
            var data = dataTable.row(this).data();
            window.location.href = data.actions[{$rowLinkAction}];
        });
        {/ifset}
    });
</script>
