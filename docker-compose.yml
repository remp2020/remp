version: "3.7"

# see .env.docker file for docker-compose ENV variables required for proper run

services:
  nginx:
    build:
      args:
        DOCKER_USER: ${DOCKER_USER}
        DOCKER_USER_ID: ${DOCKER_USER_ID}
        DOCKER_GROUP_ID: ${DOCKER_GROUP_ID}
      context: ./Docker
      dockerfile: ./nginx/Dockerfile
    environment:
      NGINX_PORT: "[::]:80"
    volumes:
      - ".:/var/www/html:rw"
      - "./Docker/nginx/default.template:/etc/nginx/conf.d/default.template:ro"
    restart: "unless-stopped"
    ports:
      - 80:80
    networks:
      default:
        aliases:
          - "campaign.remp.press"
          - "mailer.remp.press"
          - "sso.remp.press"
          - "beam.remp.press"
          - "tracker.beam.remp.press"
          - "segments.beam.remp.press"
          - "mailhog.remp.press"
          - "kibana.beam.remp.press"

  mysql:
    image: "mysql:5.7" # minimal 5.7.8
    volumes:
      - "mysql-data:/var/lib/mysql"
      - "./Docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql"
    command:
      - "--character-set-server=utf8mb4"
      - "--collation-server=utf8mb4_unicode_ci"
      - "--skip-character-set-client-handshake"
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
      MYSQL_ROOT_PASSWORD: "${DB_PASSWORD}"
    restart: "unless-stopped"

  redis:
    image: "redis:3.2"
    volumes:
      - "redis-data:/data:cached"

  mailhog:
    image: "mailhog/mailhog:v1.0.0"
    environment:
      MH_HOSTNAME: "mailhog.remp.press"

  adminer:
    build:
      args:
        DOCKER_USER: ${DOCKER_USER}
        DOCKER_USER_ID: ${DOCKER_USER_ID}
        DOCKER_GROUP_ID: ${DOCKER_GROUP_ID}
      context: ./Docker
      dockerfile: php/Dockerfile
    command: "/usr/local/sbin/php-fpm --nodaemonize --fpm-config /usr/local/etc/php-fpm.conf"
    volumes:
      - ".:/var/www/html:cached"

  # campaign

  campaign:
    build:
      args:
        DOCKER_USER: ${DOCKER_USER}
        DOCKER_USER_ID: ${DOCKER_USER_ID}
        DOCKER_GROUP_ID: ${DOCKER_GROUP_ID}
      context: ./Docker
      dockerfile: php/Dockerfile
    env_file:
      - .env.docker
    environment:
      APP_NAME: "Campaign"
      APP_URL: "${APP_URL_CAMPAIGN}"
      PHP_IDE_CONFIG: "serverName=campaign.remp.press"
      CACHE_DRIVER: "${CACHE_DRIVER_CAMPAIGN}"
      QUEUE_DRIVER: "${QUEUE_DRIVER_CAMPAIGN}"
      DB_DATABASE: "${DB_DATABASE_CAMPAIGN}"
      REMP_SSO_ERROR_URL: "${REMP_SSO_ERROR_URL_CAMPAIGN}"
    domainname: "campaign.remp.press"
    hostname: "campaign"
    volumes:
      - "./Campaign:/var/www/html/Campaign:cached"
      - "./Composer:/var/www/html/Composer:cached"
      - "./Package:/var/www/html/Package:cached"
      - "./phpcs:/var/www/html/phpcs:ro"
      - "./phpcbf:/var/www/html/phpcbf:ro"
    depends_on:
      - "nginx"
      - "mysql"
      - "redis"
    restart: "unless-stopped"

  # mailer

  mailer:
    build:
      args:
        DOCKER_USER: ${DOCKER_USER}
        DOCKER_USER_ID: ${DOCKER_USER_ID}
        DOCKER_GROUP_ID: ${DOCKER_GROUP_ID}
      context: ./Docker
      dockerfile: php/Dockerfile
    env_file:
      - .env.docker
    environment:
      APP_NAME: "Mailer"
      PHP_IDE_CONFIG: "serverName=mailer.remp.press"
      ENV: "${APP_ENV}"
      LOCALE: "${APP_LOCALE}"
      DB_ADAPTER: "${DB_CONNECTION}"
      DB_NAME: "${DB_DATABASE_MAILER}"
      DB_USER: "${DB_USERNAME}"
      DB_PASS: "${DB_PASSWORD}"
      SSO_ADDR: "${REMP_SSO_ADDR}"
      SSO_ERROR_URL: "${REMP_SSO_ERROR_URL_MAILER}"
      REMP_BEAM_SEGMENTS_ADDR: "${REMP_SEGMENTER_API_ADDR}"
      REMP_BEAM_TRACKER_ADDR: "${REMP_TRACKER_ADDR}"
    domainname: "mailer.remp.press"
    hostname: "mailer"
    volumes:
      - "./Mailer:/var/www/html/Mailer:cached"
      - "./Composer:/var/www/html/Composer:cached"
      - "./Package:/var/www/html/Package:cached"
    depends_on:
      - "nginx"
      - "mysql"
      - "redis"
      - "mailhog"
    restart: "unless-stopped"

  # sso

  sso:
    build:
      args:
        DOCKER_USER: ${DOCKER_USER}
        DOCKER_USER_ID: ${DOCKER_USER_ID}
        DOCKER_GROUP_ID: ${DOCKER_GROUP_ID}
      context: ./Docker
      dockerfile: php/Dockerfile
    env_file:
      - .env.docker
    environment:
      APP_NAME: "Sso"
      APP_URL: "${APP_URL_SSO}"
      PHP_IDE_CONFIG: "serverName=sso.remp.press"
      CACHE_DRIVER: "${CACHE_DRIVER_SSO}"
      QUEUE_DRIVER: "${QUEUE_DRIVER_SSO}"
      DB_DATABASE: "${DB_DATABASE_SSO}"
    domainname: "sso.remp.press"
    hostname: "sso"
    volumes:
      - "./Sso:/var/www/html/Sso:cached"
      - "./Composer:/var/www/html/Composer:cached"
      - "./Package:/var/www/html/Package:cached"
      - "./phpcs:/var/www/html/phpcs:ro"
      - "./phpcbf:/var/www/html/phpcbf:ro"
    depends_on:
      - "nginx"
      - "mysql"
      - "redis"
    restart: "unless-stopped"

  # beam

  beam:
    domainname: "beam.remp.press"
    hostname: "beam"
    build:
      args:
        DOCKER_USER: ${DOCKER_USER}
        DOCKER_USER_ID: ${DOCKER_USER_ID}
        DOCKER_GROUP_ID: ${DOCKER_GROUP_ID}
      context: ./Docker
      dockerfile: php/Dockerfile
    env_file:
      - .env.docker
    environment:
      APP_NAME: "Beam"
      APP_URL: "${APP_URL_BEAM}"
      PHP_IDE_CONFIG: "serverName=beam.remp.press"
      CACHE_DRIVER: "${CACHE_DRIVER_BEAM}"
      DB_DATABASE: "${DB_DATABASE_BEAM}"
      REMP_SSO_ERROR_URL: "${REMP_SSO_ERROR_URL_BEAM}"
    volumes:
      - "./Beam:/var/www/html/Beam:cached"
      - "./Composer:/var/www/html/Composer:cached"
      - "./Package:/var/www/html/Package:cached"
      - "./phpcs:/var/www/html/phpcs:ro"
      - "./phpcbf:/var/www/html/phpcbf:ro"
    depends_on:
      - "nginx"
      - "mysql"
      - "redis"
    restart: "unless-stopped"

  kafka:
    build: ./Docker/kafka
    environment:
      ADVERTISED_HOST: "kafka"
      ADVERTISED_PORT: "9092"
      CREATE_TOPICS: "beam_events:1:1"
    volumes:
      - "kafka-data:/data:cached"

  telegraf:
    build: ./Docker/telegraf
    volumes:
      - "./Docker/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro"
    depends_on:
      - "kafka"
      - "elasticsearch"
    restart: "unless-stopped"

  elasticsearch:
    build: ./Docker/elasticsearch
    volumes:
      - "./Docker/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:cached"
      - "elastic-data:/usr/share/elasticsearch/data:cached"

  kibana:
    image: "docker.elastic.co/kibana/kibana:6.2.2"

  beam_tracker:
    build:
      context: ./Beam/go
      dockerfile: cmd/tracker/Dockerfile
    env_file:
      - .env.docker
    environment:
      TRACKER_MYSQL_ADDR: "${DB_HOST}"
      TRACKER_MYSQL_DBNAME: "${DB_DATABASE_BEAM}"
      TRACKER_MYSQL_USER: "${DB_USERNAME}"
      TRACKER_MYSQL_PASSWD: "${DB_PASSWORD}"
    volumes:
      - "./Beam/go:/go/src/gitlab.com/remp/remp/Beam/go:cached"
    depends_on:
      - "kafka"
    restart: "unless-stopped"

  beam_segments:
    build:
      context: ./Beam/go
      dockerfile: cmd/segments/Dockerfile
    env_file:
      - .env.docker
    environment:
      SEGMENTS_MYSQL_ADDR: "${DB_HOST}"
      SEGMENTS_MYSQL_DBNAME: "${DB_DATABASE_BEAM}"
      SEGMENTS_MYSQL_USER: "${DB_USERNAME}"
      SEGMENTS_MYSQL_PASSWD: "${DB_PASSWORD}"
    volumes:
      - "./Beam/go:/go/src/gitlab.com/remp/remp/Beam/go:cached"
    depends_on:
      - "elasticsearch"
    restart: "unless-stopped"

volumes:
  kafka-data:
    driver: "local"
  mysql-data:
    driver: "local"
  redis-data:
    driver: "local"
  elastic-data:
    driver: "local"

networks:
  default:
